{
    "commands": [
        {
            "id": "home",
            "type": "common",
            "description": "go to home directory",
            "shortcut": "home",
            "expression": "Set-Location ~"
        },
        {
            "id": "root",
            "type": "common",
            "description": "go to root directory",
            "shortcut": "end",
            "expression": "Set-Location /"
        },
        {
            "id": "push",
            "type": "common",
            "description": "push current path to stack",
            "expression": "Push-Location"
        },
        {
            "id": "pop",
            "type": "common",
            "description": "pop last path from stack",
            "expression": "Pop-Location"
        },
        {
            "id": "clip",
            "type": "common",
            "description": "set current path to clipboard",
            "expression": "Set-Clipboard -Value $PWD.ToString()"
        },
        {
            "id": "exp",
            "aliases": ["reveal"],
            "type": "common",
            "description": "reveal in file explorer",
            "shortcut": "ctrl-r",
            "expression": "Invoke-Item ."
        },
        {
            "id": "echo",
            "aliases": ["print"],
            "type": "file",
            "description": "print '{0}' on console",
            "multiSupport": true,
            "expression": "Write-Output \"{0}\""
        },
        {
            "id": "hash",
            "aliases": ["sha1"],
            "type": "file",
            "description": "compute SHA1 for '{0}'",
            "multiSupport": true,
            "expression": "Get-FileHash -Algorithm SHA1 -Path \"{0}\""
        },
        {
            "id": "nvim",
            "type": "file",
            "description": "open '{0}' with nvim",
            "predicate": "return (IsProgramInstalled nvim)",
            "expression": "nvim \"{0}\""
        },
        {
            "id": "code",
            "type": "file",
            "description": "open '{0}' with code",
            "predicate": "return (IsProgramInstalled code)",
            "expression": "code --new-window \"{0}\""
        }
    ]
}
